plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'org.sonarqube' version '6.0.1.5171'
    id 'com.gorylenko.gradle-git-properties' version '2.4.2'
    id 'org.cyclonedx.bom' version '1.10.0'
    id 'org.openrewrite.rewrite' version '7.0.3'
}

group = 'com.ronja.crm'

def versionMajor = 1
def versionMinor = 3
def versionPatch = 3
version = "R${versionMajor}.${versionMinor}.${versionPatch}" as Object

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

ext {
    set('sonarProjectName', 'RonjaServer') as Object
    set('sonarProjectKey', 'com.ronja.crm.ronjaserver') as Object
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("com.mysql:mysql-connector-j")
    implementation("io.micrometer:micrometer-registry-prometheus:1.14.3")
    implementation("org.flywaydb:flyway-core")
    implementation("org.flywaydb:flyway-mysql")
    implementation("org.apache.commons:commons-text:1.13.0")

    testCompileOnly("org.springframework.boot:spring-boot-devtools")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.boot:spring-boot-testcontainers")
    testImplementation(platform("org.testcontainers:testcontainers-bom:1.20.4"))
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:mysql")
    testImplementation("org.testcontainers:mockserver")
    testImplementation("org.mock-server:mockserver-client-java:5.15.0")
    testImplementation("io.rest-assured:spring-mock-mvc:5.5.0")
    testImplementation("com.squareup.okhttp3:okhttp:5.0.0-alpha.14")
    testImplementation("com.squareup.okhttp3:mockwebserver:5.0.0-alpha.14")

    rewrite(platform("org.openrewrite.recipe:rewrite-recipe-bom:2.23.2"))
    rewrite("org.openrewrite.recipe:rewrite-migrate-java")
    rewrite("org.openrewrite.recipe:rewrite-spring")
}

rewrite {
    activeRecipe("com.ronja.crm.ronjaserver.NoConstantStaticImport")
    activeRecipe("org.openrewrite.java.RemoveUnusedImports")
    activeRecipe("org.openrewrite.java.OrderImports")
    activeRecipe("org.openrewrite.java.migrate.UpgradeToJava21")
    activeRecipe("org.openrewrite.java.spring.boot3.SpringBoot3BestPractices")
    activeRecipe("org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_3")
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

springBoot {
    buildInfo()
}

jacoco {
    toolVersion = '0.8.12'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "BranislavBeno_RonjaServer"
        property "sonar.projectName", "ronja-server"
    }
}

bootJar {
    archiveFileName = "ronja-server.jar"
}

bootBuildImage {
    imageName = "beo1975/ronja-server:${versionMajor}.${versionMinor}.${versionPatch}"
}
